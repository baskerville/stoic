#! /usr/bin/env python3

import re
import sys
import yaml
import jinja2
import misaka
import shutil
from copy import copy
from hashlib import md5
from getopt import getopt
from mimetypes import guess_type
from bs4 import BeautifulSoup as bs
from os import curdir, makedirs, listdir, walk
from os.path import join, isdir, basename, dirname 
from os.path import splitext, relpath, normpath, abspath

HEAD_BODY_REGEX = '\A(?:^---$(.*)^---$)?\s*(.*)\Z'

title = 'Untitled'
site_dir = 'site'
layouts_dir = 'layouts'
output_dir = 'output'
assets_dir = 'site/assets'

default_layout = 'base.j2'
source_extension = 'md'
source_index = 'index.md'
destination_index = 'index.html'
thumbnail_fmt = '{}/thumbnails/tn_{}.jpg'

home = abspath(output_dir)
items_per_page = 5
custom_filters = {}
exclude = []

env = mkd = root = None

try:
    sys.path.insert(1, curdir)
    from settings import *
    sys.path.pop(1)
except ImportError:
    pass

class PageItem:
    def __init__(self, filepath):
        url, body, head = parse(filepath)
        self.url = url
        self.filepath = filepath
        if url is None:
            return
        if head is None:
            meta = {}
        else:
            meta = yaml.load(head)
            if not isinstance(meta, dict):
                meta = {}
        self.parent = self.prev = self.next = None
        self.children = []
        self.ignore = False
        self.paginate = False
        self.__dict__.update(meta)
        body = jinja2.Template(body).render(home=home, title=title)
        content = mkd.render(body)
        self.content = content

    def build(self, top_dir=site_dir):
        for filename in sorted(listdir(top_dir)):
            filepath = join(top_dir, filename)
            filedir = relpath(filepath, site_dir)
            if filename.startswith('.') or any([filedir.startswith(s) for s in exclude]):
                continue
            if isdir(filepath):
                subtree = PageItem(filepath)
                if subtree.url is None:
                    continue
                self.add_child(subtree)
                subtree.build(filepath)
            else:
                if (filename == source_index):
                    continue
                if filename.endswith('.{}'.format(source_extension)):
                    child = PageItem(filepath)
                    self.add_child(child)

    def foliate(self):
        if self.url is None:
            return
        if self.paginate and not self.parent is None:
            children_chunks = chunks(self.children, items_per_page)
            self.children.clear()
            container = copy(self)
            container.ignore = True
            for mark, children in enumerate(children_chunks):
                child = copy(self)
                child.children = children
                attribute = 'url'
                if mark == 0:
                    attribute = 'symlink'
                setattr(child, attribute, '{}/{}'.format(self.url, mark + 1))
                container.add_child(child)
                for subchild in children:
                    subchild.parent = child
                    subchild.url = join(child.url, relpath(subchild.url, self.url))
            for child in container.children:
                child.children[0].prev = child.children[-1].next = None
            brothers = self.parent.children
            brothers[brothers.index(self)] = container
        else:
            for child in self.children:
                child.foliate()

    def render(self, trail=[]):
        trail.append(self)
        if self.ignore or self.url is None:
            pass
        else:
            if hasattr(self, 'layout'):
                layout = self.layout
            else:
                layout = default_layout
            tpl = env.get_template(layout)
            urls = [self.url]
            if hasattr(self, 'symlink'):
                urls.append(self.symlink)
            for url in urls:
                self.url = url
                dst = normpath(join(output_dir, url, destination_index))
                print(dst)
                mkdir(dst)
                with open(dst, 'w') as f:
                    html = tpl.render(item=self, root=root, trail=trail, home=home, title=title)
                    soup = bs(html)
                    f.write(soup.prettify())
            self.url = urls[0]
        for child in self.children:
            child.render(trail)
        trail.pop()

    def add_child(self, child):
        if child.url is None:
            return
        if self.paginate and len(self.children) > 0:
            last = self.children[-1]
            last.next = child
            child.prev = last
        self.children.append(child)
        child.parent = self
        if self.paginate and not hasattr(child, 'mark'):
            child.mark = len(self.children)

    def has_brothers(self):
        return not self.parent is None and len(self.parent.children) > 1

    def relurl(self, other):
        if re.match('[a-z]+:[^/].*', self.url):
            return self.url
        else:
            return relpath(self.url, other.url)

def parse(filepath):
    if isdir(filepath):
        filepath = join(filepath, source_index)
    try:
        with open(filepath, 'r') as f:
            head, body = re.search(HEAD_BODY_REGEX, f.read(), re.M | re.S).groups()
    except FileNotFoundError:
        return (None, None, None)
    filename = basename(filepath)
    filedir = dirname(relpath(filepath, site_dir))
    if filename == source_index:
        url = filedir
    else:
        fn_base, fn_ext = splitext(filename)
        url = join(filedir, fn_base)
    url = normpath(url)
    return (url, body, head)

def copy_unkown():
    for top_dir, dirnames, filenames in walk(site_dir):
        for filename in filenames:
            if filename.endswith('.{}'.format(source_extension)):
                continue
            filepath = join(top_dir, filename)
            dst = normpath(join(output_dir, relpath(filepath, site_dir)))
            print(dst)
            mkdir(dst)
            shutil.copy(filepath, dst)

def mkdir(filepath):
    if not isdir(filepath):
        filepath = dirname(filepath)
    try:
        makedirs(filepath)
    except FileExistsError:
        pass

def save(body, head, filepath):
    try:
        mkdir(filepath)
        with open(filepath, 'w') as fileobj:
            print('---\n{}---\n\n{}'.format(head, body), file=fileobj, end='')
    except Exception:
        pass

def chunks(a, n):
    return [a[i:i + n] for i in range(0, len(a), n)]

def synchronize_assets(filepaths):
    md5_to_path = {}
    path_to_md5 = {}
    for filepath in filepaths:
        try:
            with open(filepath, 'rb') as f:
                asset_md5 = md5(f.read()).hexdigest()
                asset_path = relpath(filepath, site_dir)
                md5_to_path[asset_md5] = asset_path
                path_to_md5[asset_path] = asset_md5
        except FileNotFoundError:
            print('file missing: {}'.format(filepath), file=sys.stderr)
            continue
    for top_dir, dirnames, filenames in walk(site_dir):
        for filename in filenames:
            filepath = join(top_dir, filename)
            if filename.endswith(source_extension):
                url, body, head = parse(filepath)
                if head is None:
                    continue
                meta = yaml.load(head)
                if not isinstance(meta, dict):
                    continue
                if 'asset' in meta and 'md5' in meta:
                    source_md5 = meta['md5']
                    source_path = relpath(join(site_dir, meta['asset']), site_dir)
                    if source_md5 in md5_to_path:
                        asset_path = md5_to_path[source_md5]
                        if source_path != asset_path:
                            print('path changed: {} -> {}'.format(source_path, asset_path))
                            meta['asset'] = asset_path
                            asset_dir = dirname(asset_path)
                            asset_base, asset_ext = splitext(basename(asset_path))
                            meta['thumbnail'] = thumbnail_fmt.format(asset_dir, asset_base)
                            save(body, yaml.dump(meta, default_flow_style=False), filepath=filepath)
                        del md5_to_path[source_md5]
                        del path_to_md5[asset_path]
                    elif source_path in path_to_md5:
                        asset_md5 = path_to_md5[source_path]
                        print('md5 changed: {} -> {}'.format(source_md5, asset_md5))
                        meta['md5'] = asset_md5
                        del path_to_md5[source_path]
                        del md5_to_path[asset_md5]
                        save(body, yaml.dump(meta, default_flow_style=False), filepath=filepath)

    for asset_md5, asset_path in md5_to_path.items():
        filepath = join(site_dir, asset_path)
        filename = basename(asset_path)
        fn_base, fn_ext = splitext(filename)
        source_dir = dirname(join(site_dir, relpath(filepath, assets_dir)))
        source_path = join(source_dir, '{}.{}'.format(fn_base, source_extension))
        thumbnail_path = thumbnail_fmt.format(dirname(asset_path), fn_base)
        filetype, fileencoding = guess_type(filepath)
        if filetype is None:
            layout = default_layout
        else:
            layout = '{}.j2'.format(re.search('^[^/]+', filetype).group(0))
        date = None
        date_query = re.search('^(\d{4})\D', fn_base)
        if not date_query is None:
            date = int(date_query.groups()[0])
        source_body = '\n'
        source_head = yaml.dump({'layout': layout, 'date': date, 'md5': asset_md5, 'asset': asset_path, 'thumbnail': thumbnail_path}, default_flow_style=False)
        print('new content: {}'.format(source_path))
        save(source_body, source_head, filepath=source_path)

def usage():
    print('''
    SYNOPSIS
        {} [OPTIONS]

    OPTIONS
        -h, --help
            Show this help message.

        -c, --copy-mode
            Copy the unknown files to the output directory.

        -a, --sync-assets FILE ...
            Synchronize the given assets.

        -o, --output-dir OUTPUT_DIR
            Set the output directory.
    '''.format(basename(sys.argv[0])))
    sys.exit(0)

def main():
    global env, mkd, root, exclude, output_dir
    options, args = getopt(sys.argv[1:], 'hcao:', ['help', 'verbose', 'copy-mode', 'sync-assets', 'output-dir='])
    for opt, val in options:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-a', '--sync-assets'):
            synchronize_assets(args)
            sys.exit(0)
        elif opt in ('-c', '--copy-mode'):
            copy_unkown()
            sys.exit(0)
        elif opt in ('-o', '--output-dir'):
            output_dir = val
    ldr = jinja2.FileSystemLoader([layouts_dir])
    env = jinja2.Environment(loader=ldr)
    env.filters.update(custom_filters)
    rndr = misaka.HtmlRenderer()
    mkd = misaka.Markdown(rndr)
    root = PageItem(site_dir)
    root.build()
    if items_per_page > 0:
        root.foliate()
    root.render()

if __name__ == '__main__':
    main()
